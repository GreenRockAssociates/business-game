version: '3.8'

services:

  ##################################################
  #
  #   Frontend
  #
  ##################################################

  frontend:
    build: Frontend/green-rock-frontend/
    ports:
      - '127.0.0.1:4200:80'
    restart: unless-stopped

  ##################################################
  #
  #   Gateway
  #
  ##################################################

  authentication:
    build: Gateway/Authentication/
    ports:
      - '127.0.0.1:30000:30000'
    expose:
      - '30000:30000'
    restart: unless-stopped

  command:
    build: Gateway/Command/
    ports:
      - '127.0.0.1:30003:30003'
    expose:
      - '30003:30003'
    restart: unless-stopped

  launcher:
    build: Gateway/Launcher/
    ports:
      - '127.0.0.1:30001:30001'
    expose:
      - '30001:30001'
    restart: unless-stopped

  query:
    build: Gateway/Query/
    ports:
      - '127.0.0.1:30002:30002'
    expose:
      - '30002:30002'
    restart: unless-stopped

  real-time-update:
    build: Gateway/RealTimeMarketUpdate/
    ports:
      - '127.0.0.1:30004:30004'
    expose:
      - '30004:30004'
    restart: unless-stopped

  ##################################################
  #
  #   Engine
  #
  ##################################################

  asset-health:
    build:
      context: ./Engine
      dockerfile: ./AssetHealth/Dockerfile
    expose:
      - '40003:40003'
    restart: unless-stopped

  game-orchestrator:
    build:
      context: ./Engine
      dockerfile: ./GameOrchestrator/Dockerfile
    expose:
      - '40001:40001'
    restart: unless-stopped

  market-analysis:
    build:
      context: ./Engine
      dockerfile: ./MarketAnalysis/Dockerfile
    expose:
      - '40002:40002'
    restart: unless-stopped

  market-simulation-cadencer:
    build:
      context: ./Engine
      dockerfile: ./MarketSimulationCadencer/Dockerfile
    restart: unless-stopped

  market-simulation-worker:
    build:
      context: ./Engine
      dockerfile: ./MarketSimulationWorker/Dockerfile
    restart: unless-stopped

  player-state:
    build:
      context: ./Engine
      dockerfile: ./PlayerState/Dockerfile
    expose:
      - '40000:40000'
    restart: unless-stopped

  ##################################################
  #
  #   Databases
  #
  ##################################################

  postgres-iam:
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: iam
      POSTGRES_PASSWORD: postgres
    expose:
      - '5432:5432'
    ports:
      - '127.0.0.1:5433:5432'
    volumes:
      - ./docker/postgres/iam:/var/lib/postgresql/data

  redis-iam:
    image: redis
    expose:
      - '6379:6379'
    ports:
      - '127.0.0.1:6380:6379'
    command:
      - /bin/sh
      - -c
      - redis-server --save 20 1
    volumes:
      - ./docker/redis/iam:/data

  postgres-launcher:
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: launcher
      POSTGRES_PASSWORD: postgres
    expose:
      - '5432:5432'
    ports:
      - '127.0.0.1:5434:5432'
    volumes:
      - ./docker/postgres/launcher:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  postgres-game:
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: game
      POSTGRES_PASSWORD: postgres
    expose:
      - '5432:5432'
    ports:
      - '127.0.0.1:5435:5432'
    volumes:
      - ./game_db_init.sql:/docker-entrypoint-initdb.d/game_db_init.sql
      - ./docker/postgres/game:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbit-mq-game:
    image: rabbitmq
    expose:
      - '5672:5672'
    ports:
      - '127.0.0.1:5673:5672'
    volumes:
      - ./docker/rabbitmq/data/:/var/lib/rabbitmq/
      - ./docker/rabbitmq/log/:/var/log/rabbitmq